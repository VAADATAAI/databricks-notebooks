{
  "queries_and_alerts": [
    {
      "name": "repeated_failed_login_attempts",
      "description": "Repeated failed login attempts could indicate an attacker trying to brute force access to your lakehouse. The following query can be used to detect repeated failed login attempts over a 60 minute period within the last 24 hours.",
      "query": "SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, ifnull(user_identity.email, request_params.user) AS email,  collect_set(action_name) AS action_names, collect_set(response.error_message) AS error_messages, collect_set(response.status_code) AS response_codes, count(*) AS total FROM system.access.audit WHERE action_name IN ('aadBrowserLogin', 'aadTokenLogin', 'certLogin', 'jwtLogin', 'login', 'oidcBrowserLogin', 'samlLogin', 'tokenLogin') AND response.status_code IN (401, 403) AND WINDOW(event_time, '60 minutes').end >= current_timestamp() - INTERVAL 24 HOURS GROUP BY 1, 2, 3 ORDER BY total DESC"
    },
    {
      "name": "failed_login_attempts_last_90_days",
      "description": "Repeated failed login attempts could indicate an attacker trying to brute force access to your lakehouse.",
      "query": "SELECT event_date, ifnull(user_identity.email, request_params.user) AS email, workspace_id, action_name, count(*) AS num_failed_logins FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND action_name IN ('aadBrowserLogin', 'aadTokenLogin', 'certLogin', 'jwtLogin', 'login', 'oidcBrowserLogin', 'samlLogin', 'tokenLogin') AND response.status_code IN (401, 403) GROUP BY 1, 2, 3, 4 ORDER BY event_date DESC"
  	},
    {
      "name": "data_downloads_from_control_plane",
      "description": "Databricks allows customers to configure whether they want users to be able to download notebook or SQL query results, but some customers might want to monitor and report rather than prevent entirely. The following query can be used to detect high numbers of downloads of results from notebooks, Databricks SQL, Unity Catalog volumes and MLflow, as well as the exporting of notebooks in formats that may contain query results within the last 24 hours.",
      "query": "with downloads AS (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, collect_set(workspace_id) AS workspace_ids, collect_set(service_name) AS service_names, collect_set(action_name) AS action_names, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND (action_name IN ('downloadPreviewResults', 'downloadLargeResults', 'filesGet', 'getModelVersionDownloadUri', 'getModelVersionSignedDownloadUri') OR (action_name = 'workspaceExport' AND request_params.workspaceExportFormat != 'SOURCE') OR (action_name = 'downloadQueryResult' AND request_params.fileType != 'arrows')) GROUP BY 1, 2, 3) SELECT * FROM downloads WHERE total > 20 ORDER BY total DESC"
    },
    {
      "name": "data_downloads_from_control_plane_last_90_days",
      "description": "Spikes in the number of downloads could indicate attempts to exfiltrate data.",
      "query": "SELECT event_date, ifnull(user_identity.email, request_params.user) AS email, workspace_id, action_name, count(*) AS number_of_downloads FROM system.access.audit WHERE event_time >= current_date() - INTERVAL 90 DAYS AND (action_name IN ('downloadPreviewResults', 'downloadLargeResults', 'filesGet', 'getModelVersionDownloadUri', 'getModelVersionSignedDownloadUri') OR (action_name = 'workspaceExport' AND request_params.workspaceExportFormat != 'SOURCE') OR (action_name = 'downloadQueryResult' AND request_params.fileType != 'arrows')) GROUP BY 1, 2, 3, 4 ORDER BY event_date DESC"
  	},
    {
      "name": "ip_access_list_failures",
      "description": "Databricks allows customers to configure IP Access Lists to restrict access to their account & workspaces. However, they may want to monitor and be alerted whenever access is attempted from an untrusted network. The following query can be used to detect all IpAccessDenied and accountIpAclsValidationFailed events within the last 24 hours.",
      "query": "SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, workspace_id, ifnull(user_identity.email, request_params.user) AS email, source_ip_address, collect_set(action_name) AS action_names, collect_set(response.error_message) AS error_messages, collect_set(request_params.path) AS urls, collect_set(response.status_code) AS status_codes, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name IN ('IpAccessDenied', 'accountIpAclsValidationFailed') GROUP BY 1, 2, 3, 4, 5 ORDER BY total DESC"
    },
    {
      "name": "ip_access_list_failures_last_90_days",
      "description": "Repeated IP access list failures could indicate attempts to brute force access to your lakehouse, or internal users trying to connect from untrusted networks.",
      "query": "SELECT event_date, workspace_id, source_ip_address, count(*) AS number_of_failures FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND action_name IN ('IpAccessDenied', 'accountIpAclsValidationFailed') GROUP BY 1, 2, 3 ORDER BY event_date DESC"
  	},
    {
      "name": "databricks_access_to_customer_workspaces",
      "description": "This query can be used to detect logins to your workspace via the Databricks support process. This access is tied to a support ticket while also complying with your workspace configuration that may disable such access. The following query can be used to detect Databricks access to your workspaces within the last 24 hours.",
      "query": "SELECT event_time, workspace_id, request_params.user, request_params.approver, request_params.duration, request_params.reason, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name = 'databricksAccess' GROUP BY 1, 2, 3, 4, 5, 6 ORDER BY event_time DESC"
    },
    {
      "name": "databricks_access_to_customer_workspaces_last_90_days",
      "description": "All logins to your workspace via the Databricks support process. This access is tied to a support ticket while also complying with your workspace configuration that may disable such access.",
      "query": "SELECT event_time, workspace_id, request_params.user, request_params.approver, request_params.duration, request_params.reason, count(*) AS total FROM system.access.audit WHERE event_time >= current_date() - INTERVAL 90 DAYS AND action_name = 'databricksAccess' GROUP BY 1, 2, 3, 4, 5, 6 ORDER BY event_time DESC"
  	},
    {
      "name": "repeated_access_to_secrets",
      "description": "Repeated attempts to access secrets could indicate an attempt to steal credentials. The following SQL query can be used to detect users who have attempted a high number (>10) of attempts to access secrets within an hour period over the last 24 hours. This query filters out requests from Databricks System-Users, although you could optionally add them back in.",
      "query": "SELECT * FROM (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, collect_set(workspace_id) AS workspace_ids, size(collect_set(request_params.scope)) AS num_scopes_accessed, collect_set(request_params.scope) AS secret_scopes, size(collect_set(request_params.key)) AS num_keys_accessed, collect_set(request_params.key) AS secret_keys, count(*) AS num_requests FROM system.access.audit WHERE action_name = 'getSecret' AND event_time >= current_timestamp() - INTERVAL 24 HOURS AND user_identity.email NOT IN ('System-User') GROUP BY 1, 2, 3) WHERE num_keys_accessed >= 10 ORDER BY num_keys_accessed DESC"
    },
    {
      "name": "access_to_secrets_last_90_days",
      "description": "A spike in the number of requests to access secrets could indicate attempts to steal credentials.",
      "query": "SELECT event_date, user_identity.email, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, concat(request_params.scope, '/', request_params.key) AS secret, count(*) AS num_requests FROM system.access.audit WHERE action_name = 'getSecret' AND event_date >= current_date() - INTERVAL 90 DAYS AND user_identity.email NOT IN ('System-User') GROUP BY 1, 2, 3, 4 ORDER BY event_date DESC",
  	},
    {
      "name": "ip_addresses_used_to_access_databricks",
      "description": "The following SQL query will show you which IP addresses and the number of requests for each have been used to access your workspace or account over the last 90 days.",
      "query": "SELECT regexp_replace(source_ip_address, '(:\\\\d*)', '') AS source_ip_address, CASE WHEN audit_level = 'ACCOUNT_LEVEL' AND service_name != 'unityCatalog' THEN 'account' WHEN audit_level = 'ACCOUNT_LEVEL' AND service_name = 'unityCatalog' THEN 'unity_catalog' WHEN audit_level = 'WORKSPACE_LEVEL' THEN 'workspace' ELSE NULL END AS service, count(*) AS total_requests FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND source_ip_address NOT IN ('', '0.0.0.0', '127.0.0.1') GROUP BY 1, 2 ORDER BY total_requests DESC"
  	},
        {
      "name": "ip_address_ranges_used_to_access_databricks",
      "description": "The following SQL query will show you which IP address ranges and the number of requests for each have been used to access your workspaces or account over the last 90 days.",
      "query": "SELECT concat(substring_index(source_ip_address, '.', 3), '.0/24') AS source_ip_range, CASE WHEN audit_level = 'ACCOUNT_LEVEL' AND service_name != 'unityCatalog' THEN 'account' WHEN audit_level = 'ACCOUNT_LEVEL' AND service_name = 'unityCatalog' THEN 'unity_catalog' WHEN audit_level = 'WORKSPACE_LEVEL' THEN 'workspace' ELSE NULL END AS service, count(*) AS total_requests FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND source_ip_address NOT IN ('', '0.0.0.0', '127.0.0.1') GROUP BY concat(substring_index(source_ip_address, '.', 3), '.0/24'), 2 ORDER BY total_requests DESC"
  	},
    {
      "name": "repeated_unauthorized_uc_requests",
      "description": "Repeated unauthorized UC requests could indicate privilege escalation, data exfiltration attempts or an attacker trying to brute force access to your data. The following query can be used to detect repeated unauthorized UC requests over a 60 minute period within the last 24 hours.",
      "query": "WITH failed_requests AS (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, request_params.metastore_id, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, action_name, response.error_message FROM system.access.audit WHERE service_name = 'unityCatalog' AND response.status_code IN (401, 403) AND WINDOW(event_time, '60 minutes').end >= current_timestamp() - INTERVAL 24 HOURS), failed_requests_agg AS (SELECT window_start, window_end, email, metastore_id, collect_set(workspace_id) AS workspace_ids,collect_set(action_name) AS action_names, collect_set(error_message) AS error_messages, count(*) AS total FROM failed_requests GROUP BY 1, 2, 3, 4) SELECT * FROM failed_requests_agg WHERE total > 25 ORDER BY total DESC"
    },
    {
      "name": "repeated_unauthorized_uc_data_requests",
      "description": "Repeated unauthorized UC data requests could indicate privilege escalation, data exfiltration attempts or an attacker trying to brute force access to your data. The following query can be used to detect repeated unauthorized UC data access ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') requests over a 60 minute period within the last 24 hours.",
      "query": "WITH failed_data_access AS (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end,user_identity.email, request_params.metastore_id, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, action_name, CASE WHEN isnotnull(request_params.table_full_name) THEN request_params.table_full_name WHEN isnotnull(request_params.volume_full_name) THEN request_params.volume_full_name WHEN isnotnull(request_params.name) THEN request_params.name WHEN isnotnull(request_params.url) THEN request_params.url  WHEN isnotnull(request_params.table_url) THEN request_params.table_url WHEN isnotnull(request_params.table_id) THEN request_params.table_id WHEN isnotnull(request_params.volume_id) THEN request_params.volume_id ELSE NULL END AS securable, response.error_message FROM system.access.audit WHERE action_name IN ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') AND response.status_code IN (401, 403) AND WINDOW(event_time, '60 minutes').end >= current_timestamp() - INTERVAL 24 HOURS),  failed_data_access_agg AS (SELECT window_start, window_end, email, metastore_id, collect_set(workspace_id) AS workspace_ids, collect_set(action_name) AS action_names, collect_set(securable) AS securables, collect_set(error_message) AS errors, count(*) AS total FROM failed_data_access GROUP BY 1, 2, 3, 4) SELECT * FROM failed_data_access_agg WHERE total > 15 ORDER BY total DESC"
    },
    {
      "name": "delta_sharing_ip_access_list_failures",
      "description": "If you’re sharing personal data, delta sharing recipients should always be secured with IP access lists. The following SQL query can be used to detect Delta Sharing data access requests ('deltaSharingQueryTable', 'deltaSharingQueryTableChanges') which have failed IP access list checks within the last 24 hours.",
      "query": "SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, source_ip_address, request_params.metastore_id, collect_set(request_params.name) AS share_names, collect_set(request_params.share) AS shares, collect_set(request_params.recipient_name) AS recipient_names, collect_set(request_params.recipient_authentication_type) AS authentication_types, COUNT(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'unityCatalog' AND action_name IN ('deltaSharingQueryTable', 'deltaSharingQueryTableChanges') AND request_params.is_ip_access_denied = 'true' GROUP BY 1, 2, 3, 4 ORDER BY total DESC"
    },
    {
      "name": "clam_av_infected_files_detected",
      "description": "Customers using one of our compliance security profile offerings have additional monitoring agents including antivirus installed on their data plane hosts. The following query can be used to detect all antivirus scan events during which infected files have been detected within the last 24 hours. Note that this SQL query/alert will trigger when the ClamAV scan has completed, which may be several hours after the infected file has been found. See clam_av_infected_files_found for a query/alert that will trigger as soon as an infected file has been found.",
      "query": "SELECT event_time, workspace_id, request_params.instanceId, regexp_extract(response.result, ('Infected files: (\\\\d+)')) AS infected_files FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'clamAVScanService-dataplane' AND startswith(response.result, 'Infected files:') AND regexp_extract(response.result, ('Infected files: (\\\\d+)')) > 0 ORDER BY event_time DESC"
    },
    {
      "name": "clam_av_infected_files_found",
      "description": "Customers using one of our compliance security profile offerings have additional monitoring agents including antivirus installed on their data plane hosts. The following query can be used to detect all antivirus scan events during which infected files have been found within the last 24 hours. Note, that this query/alert will detect infected files as soon as they have been found, rather than when the ClamAV scan finishes.",
      "query": "SELECT event_time, workspace_id, request_params.instanceId, regexp_extract(response.result, ': (.*) FOUND') AS signature, regexp_extract(response.result, '(.*):') AS file_path FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'clamAVScanService-dataplane' AND contains(response.result, 'FOUND') ORDER BY event_time DESC"
    },
    {
      "name": "capsule8_container_breakout_events",
      "description": "User code runs in low-privileged containers. A container escape could compromise the security of the cluster especially when running with user isolation for Unity Catalog or Table ACLs. Capsule8 provides a few alerts related to container isolation issues that should be investigated if triggered. The following query can be used to detect all container breakout events within the last 24 hours.",
      "query": "SELECT event_time, workspace_id, request_params.instanceId, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'capsule8-alerts-dataplane' AND action_name in ('Container Escape via Kernel Exploitation', 'Userland Container Escape', 'New File Executed in Container', 'Privileged Container Launched') GROUP BY 1, 2, 3 ORDER BY event_time DESC"
    },
    {
      "name": "capsule8_changes_to_host_security_settings",
      "description": "No untrusted code or end-user commands should be running on the host OS. There should be no process making changes to security configurations of the host VM. The following SQL query can be used to help us identify suspicious changes within the last 24 hours.",
      "query": "SELECT event_time, workspace_id, request_params.instanceId, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'capsule8-alerts-dataplane' AND action_name in ('Processor-Level Protections Disabled', 'AppArmor Disabled In Kernel', 'AppArmor Profile Modified', 'Boot Files Modified', 'Root Certificate Store Modified') GROUP BY 1, 2, 3 ORDER BY event_time DESC"
    },
    {
      "name": "capsule8_kernel_related_events",
      "description": "Kernel related events could be another indicator of malicious code running on the host. In particular there should be no kernel modules loaded or internal kernel functions being called by user code. The following SQL query can be used to detect any kernel related events within the last 24 hours.",
      "query": "SELECT event_time, workspace_id, request_params.instanceId, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'capsule8-alerts-dataplane' AND action_name in ('BPF Program Executed', 'Kernel Module Loaded', 'Kernel Exploit') GROUP BY 1, 2, 3 ORDER BY event_time DESC"
    },
    {
      "name": "capsule8_suspicious_host_activity",
      "description": "Given the architecture of the Databricks containerized runtime and host OS model, only trusted code should be making changes or executing on the host EC2. Changes to containers, evasive actions, or interactive shells could be due to suspicious activity on the host and should be reviewed. The following SQL query can be used to detect suspicious host activity within the last 24 hours.",
      "query": "SELECT event_time, workspace_id, request_params.instanceId, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'capsule8-alerts-dataplane' AND action_name in ('New File Executed in Container', 'Suspicious Interactive Shell', 'User Command Logging Evasion', 'Privileged Container Launched') GROUP BY 1, 2, 3 ORDER BY event_time DESC",
      "parent": "system_tables/audit/compliance_security_profile/queries/"
    }
  ]
}